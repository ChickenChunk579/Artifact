name: "Build"
on:
  push:
    branches: ["main"]
    
jobs:
  # Build job
  build-ios:
    runs-on: macos-latest
    steps:
      # Checks-out our repository under $GITHUB_WORKSPACE, so our job can access it
      - name: Checkout repository
        uses: actions/checkout@v2

      # Install the Apple certificate and provisioning profile 
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      # Install flutter
      - name: Flutter get
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      # Install your project's dependencies
      - run: flutter pub get

      # Build and sign the ipa using a single flutter command
      - name: Building IPA
        run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist --no-codesign
      
      - name: IPAify
        run: |
          mkdir Payload
          mv build/ios/archive/Runner.xcarchive/Products/Applications/Runner.app Payload
          zip -r "app.ipa" "Payload"

      # Collect the file and upload as artifact         
      - name: Upload IPA
        uses: actions/upload-artifact@v3
        with:
         name: release-ipa
         # Path to the release files
         path: ./app.ipa

      # Important! Cleanup: remove the certificate and provisioning profile from the runner!
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Flutter get
        uses: subosito/flutter-action@v2
        with:
          channel: stable
      - name: Install dependencies
        run: flutter pub get
      - name: Build
        run: flutter build windows
      - name: Create archive
        run: powershell Compress-Archive .\build\windows\x64\runner\Release app.zip
      - name: Upload app
        uses: actions/upload-artifact@v3
        with:
          name: release-exe
          # Path to the release files
          path: app.zip
  build-linux:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Flutter get
        uses: subosito/flutter-action@v2
        with:
          channel: stable
      - name: Install build-essential
        run: sudo apt-get update && sudo apt-get install -y build-essential
      - name: Install ninja
        run: sudo apt-get update && sudo apt-get install -y ninja-build
      - name: Install dependencies
        run: flutter pub get
      - name: Build
        run: flutter build linux
      - name: Create archive
        run: zip -r "app.zip" "build/linux/x64/release/bundle/"
      - name: Upload app
        uses: actions/upload-artifact@v3
        with:
          name: release-linux
          # Path to the release files
          path: build/linux/x64/release/bundle/